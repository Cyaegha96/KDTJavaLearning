import java.util.Scanner;

public class Exam01 {

	public static void main(String[] args) {
		//기존 절차지향 (1971~1981) 패러다임에서 발생하는 코드 관리 문제점
		//1. 코드를 작성할 때마다, 매번 백지에서부터 다시 시작할 것인가?
		//2. 서로 다른 데이터 타입의 자료들을 계속 따로 관리할 것인가?
		//3. 새롭게 생성되는 함수들도 특정 경계 없이 코드상에 흩뿌려 놓을 것인가?
		
		//객체 지향 패러다임의 문제 해결
		//1. 하나의 공통된 주제 아래 서로 다른 데이터 타입들과 함수를 하나로 묶는 문법 (Class)
		//2. 만들어진 Class의 재사용성이 높아 개발 효율성을 높임.
		
		
		//객체지향은 만들고자 하는 대상이 무엇이든 전부 기능/.속성으로 정의할 수 있다고 판단
		//음 근데 추상적인거 빼고
		//기능 -> 메서드 , 속성 -> 변수
		
		
		//객체 지향 코딩 Steps
		//1 만들고자 하는 대상을 선택한다.
		//2. 정한 대상에 대한 기능/속성을 정리한다.
		//---------여기까지는 어디까지나 구상에 가까움
		//3. 설계한 내용을 class 파일로 구현한다. -(Class 파일은 본질적으로 객체에 대한 설계도)
		//4. 클래스 파일로 구현된 설계도를 바탕으로 인스턴스를 생성한다.
		//5. 생성된 인스턴스르 참조(.)하여 필요한 기능을 사용한다.

		Tv tv = new Tv();
		tv.getTvInfo();
		System.out.println();
		
		
		tv.powerOn();
		tv.setBrand("LG");
		tv.getTvInfo();
		
		
		Tablet tablet = new Tablet();
		tablet.getTableInfo();
	}

}
